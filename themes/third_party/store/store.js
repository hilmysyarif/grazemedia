// Generated by CoffeeScript 1.4.0

/*
Exp:resso Store module for ExpressionEngine (support@exp-resso.com)
Copyright (c) 2010-2013 Exp:resso
All rights reserved.
*/


(function() {
  var $, lib, _ref, _ref1;

  $ = window.jQuery;

  lib = (_ref = window.ExpressoStore) != null ? _ref : window.ExpressoStore = {};

  if ((_ref1 = lib.products) == null) {
    lib.products = {};
  }

  lib.formatCurrency = function(value) {
    var options, out, parts;
    options = $.extend({
      currencySymbol: '$',
      currencyDecimals: 2,
      currencyThousandsSep: ',',
      currencyDecPoint: '.',
      currencySuffix: ''
    }, lib.currencyConfig);
    parts = value.toFixed(options.currencyDecimals).split('.');
    out = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, options.currencyThousandsSep);
    if (parts[1] != null) {
      out += options.currencyDecPoint + parts[1];
    }
    return options.currencySymbol + out + options.currencySuffix;
  };

  lib.serializeForm = function(form) {
    var elem, values, _i, _len, _ref2;
    values = {};
    _ref2 = $(form).serializeArray();
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      elem = _ref2[_i];
      values[elem.name] = elem.value;
    }
    return values;
  };

  lib.matchSku = function(formdata) {
    var item, match, mod_id, opt_id, product, _i, _len, _ref2, _ref3;
    product = lib.products[formdata.entry_id];
    if (!product) {
      return false;
    }
    if (product.stock.length === 1) {
      return product.stock[0];
    }
    _ref2 = product.stock;
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      item = _ref2[_i];
      match = true;
      _ref3 = item.opt_values;
      for (mod_id in _ref3) {
        opt_id = _ref3[mod_id];
        if (formdata["modifiers_" + mod_id] !== opt_id.toString()) {
          match = false;
          break;
        }
      }
      if (match) {
        return item;
      }
    }
    return false;
  };

  lib.calculatePrice = function(formdata) {
    var mod_id, modifier, opt_value, option, price, product, _ref2;
    product = lib.products[formdata.entry_id];
    if (!product) {
      return false;
    }
    price = product.price;
    _ref2 = product.modifiers;
    for (mod_id in _ref2) {
      modifier = _ref2[mod_id];
      opt_value = formdata["modifiers_" + mod_id];
      option = modifier.options[opt_value];
      if (option) {
        price += option.opt_price_mod_val;
      }
    }
    return price;
  };

  lib.updateSku = function() {
    var form, formdata, in_stock, price, price_inc_tax, price_inc_tax_str, price_str, sku, skudata, stock_level;
    sku = stock_level = "";
    in_stock = true;
    formdata = lib.serializeForm(this.form);
    skudata = lib.matchSku(formdata);
    if (skudata) {
      sku = skudata.sku;
      if (skudata.track_stock === "y") {
        stock_level = skudata.stock_level;
        if (stock_level <= 0) {
          in_stock = false;
        }
      }
    }
    form = $(this.form);
    $(".store_product_sku", form).val(sku).text(sku).trigger("change");
    $(".store_product_stock", form).val(stock_level).text(stock_level).trigger("change");
    $(".store_product_in_stock", form).toggle(in_stock);
    $(".store_product_out_of_stock", form).toggle(!in_stock);
    price = lib.calculatePrice(formdata);
    if (price !== false) {
      price_str = lib.formatCurrency(price);
      price_inc_tax = price * (1 + lib.cart.tax_rate);
      price_inc_tax_str = lib.formatCurrency(price_inc_tax);
      $(".store_product_price_val", form).val(price).text(price).trigger("change");
      $(".store_product_price", form).val(price_str).html(price_str).trigger("change");
      $(".store_product_price_inc_tax_val", form).val(price_inc_tax).text(price_inc_tax).trigger("change");
      return $(".store_product_price_inc_tax", form).val(price_inc_tax_str).html(price_inc_tax_str).trigger("change");
    }
  };

  lib.changeRegionSelect = function(countryCode, regionElem) {
    var region_id, region_name, regions;
    regions = lib.countries[countryCode].regions;
    regionElem.empty();
    for (region_id in regions) {
      region_name = regions[region_id];
      regionElem.append('<option value="' + region_id + '">' + region_name + '</option>');
    }
    if (regionElem.children().size() === 0) {
      regionElem.append('<option></option>');
    }
    return regionElem.trigger('change');
  };

  $(function() {
    if (lib.products) {
      $(document).delegate('.store_product_form [name^="modifiers"]:not(:radio)', 'change', lib.updateSku).delegate('.store_product_form [name^="modifiers"]:radio', 'click', lib.updateSku);
      $('.store_product_form input:first').each(lib.updateSku);
    }
    if (lib.countries) {
      $("select[name=billing_country]").change(function() {
        return lib.changeRegionSelect($(this).val(), $("select[name=billing_region]"));
      });
      return $("select[name=shipping_country]").change(function() {
        return lib.changeRegionSelect($(this).val(), $("select[name=shipping_region]"));
      });
    }
  });

}).call(this);
